# -*- coding: utf-8 -*-
"""HealthAI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t0hqRXFeu66QlrkA2xf3p6zZApSioKle
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Base generation function
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# Disease prediction
def disease_prediction(symptoms):
    prompt = f"""Based on the following symptoms, provide possible medical conditions and general medication suggestions.
Always emphasize the importance of consulting a doctor for proper diagnosis.

Symptoms: {symptoms}

Possible conditions and recommendations:

IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.

Analysis:"""
    return generate_response(prompt, max_length=1200)

# Treatment plan
def treatment_plan(condition, age, gender, medical_history):
    prompt = f"""Generate personalized treatment suggestions for the following patient information.
Include home remedies and general medication guidelines.

Medical Condition: {condition}
Age: {age}
Gender: {gender}
Medical History: {medical_history}

Personalized treatment plan including home remedies and medication guidelines:

IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.

Treatment Plan:"""
    return generate_response(prompt, max_length=1200)

# Specialist recommendation
def specialist_recommendation(symptoms):
    prompt = f"""Based on the following symptoms, recommend the type of doctor or specialist the patient should consult.

Symptoms: {symptoms}

Recommended Specialist:"""
    return generate_response(prompt, max_length=500)

# Save report function
def save_report(content):
    file_path = "medical_report.txt"
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(content)
    return file_path

# Create Gradio interface
with gr.Blocks() as app:
    gr.Markdown("# üè• Medical AI Assistant")
    gr.Markdown("‚ö†Ô∏è Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.")

    with gr.Tabs():

        # Tab 1: Disease Prediction
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")
                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        # Tab 2: Treatment Plans
        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")
                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)
                    save_btn = gr.Button("Download Report")
                    save_output = gr.File()

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)
            save_btn.click(save_report, inputs=plan_output, outputs=save_output)

        # Tab 3: Specialist Recommendation
        with gr.TabItem("Specialist Recommendation"):
            with gr.Row():
                with gr.Column():
                    specialist_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., chest pain, shortness of breath...",
                        lines=4
                    )
                    specialist_btn = gr.Button("Get Recommendation")
                with gr.Column():
                    specialist_output = gr.Textbox(label="Recommended Specialist", lines=10)

            specialist_btn.click(specialist_recommendation, inputs=specialist_input, outputs=specialist_output)

app.launch(share=True)